[{"categories":["导航"],"content":"影视大全 逗别看 五杀电影院 看看屋 电视直播 在线之家 9528 人人影视美剧 中国高清网 妮可动漫 ","date":"2020-01-01","objectID":"/%E8%B1%86%E9%A5%BC%E5%AF%BC%E8%88%AA/:1:0","tags":["导航"],"title":"豆饼导航","uri":"/%E8%B1%86%E9%A5%BC%E5%AF%BC%E8%88%AA/"},{"categories":["导航"],"content":"博客精选 如有乐享 阮一峰 卢松松博客 胡萝卜周 lrepacks 奔跑中的奶酪 传媒老跟班 福利吧 ","date":"2020-01-01","objectID":"/%E8%B1%86%E9%A5%BC%E5%AF%BC%E8%88%AA/:2:0","tags":["导航"],"title":"豆饼导航","uri":"/%E8%B1%86%E9%A5%BC%E5%AF%BC%E8%88%AA/"},{"categories":["导航"],"content":"导航大全 龙轩导航 影迷导航网 设计导航 饭团导航 纳米学习导航 泡面吧 新东方教育导航 大数据导航 英语学习 玩博客 ","date":"2020-01-01","objectID":"/%E8%B1%86%E9%A5%BC%E5%AF%BC%E8%88%AA/:3:0","tags":["导航"],"title":"豆饼导航","uri":"/%E8%B1%86%E9%A5%BC%E5%AF%BC%E8%88%AA/"},{"categories":["物理"],"content":"10 Myths About The Quantum Universe For centuries, the laws of physics seemed completely deterministic. If you knew where every particle was, how fast it was moving, and what the forces were between them at any one instant, you could know exactly where they’d be and what they’d be doing at any point in the future. From Newton to Maxwell, the rules that governed the Universe had no built-in, inherent uncertainty to them in any form. Your only limits arose from your limited knowledge, measurements, and calculational power. 几个世纪以来，物理定律似乎是完全确定的。 如果你知道每个粒子的位置，运动的速度，以及在任何一个时刻它们之间的作用力，你就能准确地知道它们在未来的任何一个时刻会在哪里，以及它们会做什么。 从牛顿到麦克斯韦，支配宇宙的规则没有内在的、固有的任何形式的不确定性。 你们唯一的限制来自于你们有限的知识、测量和计算能力。 All of that changed a little over 100 years ago. From radioactivity to the photoelectric effect to the behavior of light when you passed it through a double slit, we began realizing that under many circumstances, we could only predict the probability that various outcomes would arise as a consequence of the quantum nature of our Universe. But along with this new, counterintuitive picture of reality, many myths and misconceptions have arisen. Here’s the true science behind 10 of them. 这一切在100多年前发生了改变。 从放射性到光电效应，再到光通过双缝时的行为，我们开始意识到，在许多情况下，我们只能预测宇宙的量子特性会产生各种结果的可能性。 但是伴随着这个新的，违反直觉的现实图景，许多神话和误解已经产生。 以下是其中10种方法背后的真正科学原理。 1.) Quantum effects only happen on small scales. When we think of quantum effects, we typically think about individual particles (or waves) and the bizarre properties they display. But large-scale, macroscopic effects happen that are inherently quantum in nature. 1.) 量子效应只发生在小尺度上。 当我们想到量子效应时，我们通常会想到单个粒子(或波)以及它们所表现出来的奇异属性。 但是大规模的宏观效应，本质上是量子效应。 Conducting metals cooled below a certain temperature become superconductors: where their resistance drops to zero. Building superconducting tracks where magnets levitate above them and travel around them without ever slowing down is a routine student science project these days, built on an inherently quantum effects. 导电金属在低于一定温度时冷却成为超导体: 在这种情况下，它们的电阻降到零。 建造超导轨道，磁铁悬浮在轨道上方，绕轨道飞行而不放慢速度，如今已成为学生们的常规科学项目，建立在固有的量子效应之上。 Superfluids can be created on large, macroscopic scales, as can quantum drums that simultaneously do and don’t vibrate. Over the past 25 years, 6 Nobel Prizes have been awarded for various macroscopic quantum phenomena. 超流体可以在宏观的大尺度上产生，就像量子鼓可以同时振动和不振动一样。 在过去的25年里，有6个诺贝尔奖被授予各种宏观量子现象。 2.) Quantum always means “discrete.\" The idea that you can chop up matter (or energy) into individual chunks — or quanta — is an important concept in physics, but it doesn’t fully encompass what it means for something to be “quantum” in nature. For example: consider an atom. Atoms are made of atomic nuclei with electrons bound to them. 2.) 量子总是意味着“离散” 你可以把物质(或能量)分割成单独的块(或量子) ，这是物理学中的一个重要概念，但它并没有完全涵盖“量子”在自然界中的含义。 例如: 考虑一个原子。 原子是由原子核构成的，原子核上有与原子核相连的电子。 Now, think about this question: where is the electron at any moment in time? 现在，想想这个问题: 电子在任何时刻在哪里？ Even though the electron is a quantum entity, its position is uncertain until you measure it. Take many atoms and bind them together (such as in a conductor), and you’ll frequently discover that although there are discrete energy levels that the electrons occupy, their positions can literally be anywhere within the conductor. Many quantum effects are continuous in nature, and it’s eminently possible that space and time, at a fundamental, quantum level, are continuous, too. 即使电子是一个量子实体，它的位置在你测量它之前是不确定的。 把许多原子绑在一起(比如在导体中) ，你会经常发现，尽管电子占据着离散的能级，但是它们的位置可以在导体中的任何地方。 许多量子效应在本质上是连续的，而且在基本的量子水平上，空间和时间也很有可能是连续的。 3.) Quantum entanglement allows information to travel faster-than-light. Here’s an experiment we can perform: 3.)量子纠缠可以让信息以超光速的方式传播。下面是我们可以做的一个实验: create two entangled particles, 创造两个相互纠缠的粒子, separate them by a great distance, 把他们隔得很远, measure certain quantum properties (like the spin) of one particle on your end, 测量你那一端一个粒子的某些量子属性(如自旋), and you can know some information about the quantum state of other particle instantaneously: faster than the speed of light. 你可以立刻知道其他粒子的量子态的一些信","date":"2020-06-11","objectID":"/%E5%85%B3%E4%BA%8E%E9%87%8F%E5%AD%90%E5%AE%87%E5%AE%99%E7%9A%8410%E4%B8%AA%E8%AF%AF%E5%8C%BA/:0:0","tags":["量子","物理"],"title":"关于量子宇宙的10个误区","uri":"/%E5%85%B3%E4%BA%8E%E9%87%8F%E5%AD%90%E5%AE%87%E5%AE%99%E7%9A%8410%E4%B8%AA%E8%AF%AF%E5%8C%BA/"},{"categories":["脑科学"],"content":"\r\r\r\r.childbox{ width: 80vmin;\rheight: 45vmin;\r}\r\r","date":"2020-05-08","objectID":"/%E8%84%91%E7%A7%91%E5%AD%A6/:0:0","tags":["脑科学"],"title":"从脑科学到人工智能的示例","uri":"/%E8%84%91%E7%A7%91%E5%AD%A6/"},{"categories":["安全"],"content":"基础 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:0:0","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"前端与后端知识 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:1:0","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"web漏洞 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:0","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"XSS ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:1","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"CSRF ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:2","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"点击劫持 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:3","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"URL跳转 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:4","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"SQL注入 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:5","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"命令注入 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:6","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"上传下载漏洞 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:2:7","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"web安全工具 ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:3:0","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"浏览器 Chrome Firefox(hackbar,cookie manager) IE ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:3:1","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"代理抓包 Burpsuite Charles Fiddler ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:3:2","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"漏洞扫描 御剑 AWVS Netsparker APPScan sqlmap ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:3:3","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"暴力破解 ZAP ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:3:4","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["安全"],"content":"实战 DVWA ","date":"2020-02-07","objectID":"/web%E5%AE%89%E5%85%A8/:4:0","tags":["安全","web"],"title":"web安全笔记","uri":"/web%E5%AE%89%E5%85%A8/"},{"categories":["python"],"content":"利用init破解权限和免注册com #coding=utf-8 from ctypes import windll from comtypes import client #加载init.dll Reg = windll.LoadLibrary(\"./init.dll\") Reg.init() dm=client.CreateObject(\"dm.dmsoft\") print(dm.ver()) dm.MoveTO(10,10) 附件 ","date":"2020-02-03","objectID":"/python%E8%B0%83%E7%94%A8%E5%A4%A7%E6%BC%A0%E6%8F%92%E4%BB%B6/:1:0","tags":["python","dll"],"title":"python调用大漠插件","uri":"/python%E8%B0%83%E7%94%A8%E5%A4%A7%E6%BC%A0%E6%8F%92%E4%BB%B6/"},{"categories":["rust"],"content":"rust导出dll ","date":"2020-02-02","objectID":"/rust%E5%AF%BC%E5%87%BAdll/:1:0","tags":["rust","dll"],"title":"rust导出Dll","uri":"/rust%E5%AF%BC%E5%87%BAdll/"},{"categories":["rust"],"content":"首先创建lib项目 cargo new addlib -lib ","date":"2020-02-02","objectID":"/rust%E5%AF%BC%E5%87%BAdll/:1:1","tags":["rust","dll"],"title":"rust导出Dll","uri":"/rust%E5%AF%BC%E5%87%BAdll/"},{"categories":["rust"],"content":"编辑lib.rs //添加一个标记 #[no_mangle]，防止编译器在编译的时候，重命名函数。 #[no_mangle]//pub 公开 extern,导出 //\"stdcall\"是调用约定ABI，rust支持stdcall，aapcs，cdecl，fastcall，vectorcall，Rust，rust-intrinsic，system，C，win64，sysv64 pubextern\"stdcall\"fn add(a: i32,b:i32)-\u003e i32 {returna+b;} ","date":"2020-02-02","objectID":"/rust%E5%AF%BC%E5%87%BAdll/:1:2","tags":["rust","dll"],"title":"rust导出Dll","uri":"/rust%E5%AF%BC%E5%87%BAdll/"},{"categories":["rust"],"content":"编辑cargo.toml，添加 [lib] name=\"addlib\" crate-type = [\"cdylib\"] ","date":"2020-02-02","objectID":"/rust%E5%AF%BC%E5%87%BAdll/:1:3","tags":["rust","dll"],"title":"rust导出Dll","uri":"/rust%E5%AF%BC%E5%87%BAdll/"},{"categories":["rust"],"content":"终端运行 cargo build --release 编译成功之后会在相关目录生成动态库文件。 ","date":"2020-02-02","objectID":"/rust%E5%AF%BC%E5%87%BAdll/:1:4","tags":["rust","dll"],"title":"rust导出Dll","uri":"/rust%E5%AF%BC%E5%87%BAdll/"},{"categories":["rust"],"content":"官网下载初始化包 官网 ","date":"2020-02-01","objectID":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:1:0","tags":["rust","编程"],"title":"rust环境配置","uri":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["rust"],"content":"根据初始化包安装对应的工具 主要安装rustup和cargo工具链 ","date":"2020-02-01","objectID":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:2:0","tags":["rust","编程"],"title":"rust环境配置","uri":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["rust"],"content":"国内原因换源 ","date":"2020-02-01","objectID":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:3:0","tags":["rust","编程"],"title":"rust环境配置","uri":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["rust"],"content":"rustup源 linux $ # for bash $ echo 'export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup' \u003e\u003e ~/.bash_profile windows 修改环境变量： 变量名为 RUSTUP_DIST_SERVER 变量值为 https://mirrors.tuna.tsinghua.edu.cn/rustup ","date":"2020-02-01","objectID":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:3:1","tags":["rust","编程"],"title":"rust环境配置","uri":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["rust"],"content":"cargo源 windows # 新建 %USERPROFILE%\\.cargo\\config [source.crates-io] replace-with = \"rustcc\" [source.rustcc] registry = \"https://code.aliyun.com/rustcc/crates.io-index\" linux tee $HOME/.cargo/config \u003c\u003c-'EOF' [source.crates-io] replace-with = \"rustcc\" [source.rustcc] registry = \"https://code.aliyun.com/rustcc/crates.io-index\" ","date":"2020-02-01","objectID":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:3:2","tags":["rust","编程"],"title":"rust环境配置","uri":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["rust"],"content":"配置ide 安装vscode后，安装rust(rls)插件,用cargo new hello_cargo新建工程文件，打开工程按照提示安装rls等工具。 调试环境，windows安装C/C++插件，linux安装codelldb插件 配置launch.json调试文件如下： { \"version\": \"0.2.0\", \"configurations\": [ \"name\": \"Debug\", \"type\": \"cppvsdbg\", \"request\": \"launch\", //调试程序位置 \"program\": \"${workspaceFolder}/target/debug/YOUR_EXECUTABLE.exe\", \"args\": [], \"stopAtEntry\": false, \"externalConsole\": false, \"preLaunchTask\": \"cargo build\", \"type\": \"cppvsdbg\", // rust源码文件 \"sourceFileMap\": { \"/rustc/4560ea788cb760f0a34127156c78e2552949f734\": \"${env:HOME}${env:USERPROFILE}\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\src\\\\rust\" } ] } rust中文文档 ","date":"2020-02-01","objectID":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:4:0","tags":["rust","编程"],"title":"rust环境配置","uri":"/rust%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["ssh"],"content":"SSH服务器 ","date":"2019-11-13","objectID":"/windows%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":["windows","ssh"],"title":"windows开启SSH服务器","uri":"/windows%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["ssh"],"content":"安装 openssh 设置-应用-应用和功能-管理可选功能-添加功能-OpenSSH 服务器 ","date":"2019-11-13","objectID":"/windows%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:0","tags":["windows","ssh"],"title":"windows开启SSH服务器","uri":"/windows%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["ssh"],"content":"开启SSH 服务 PowerShell 管理员运行： 启动 SSH 服务net start sshd net start sshd 启动成功显示： OpenSSH SSH Server 服务正在启动 . OpenSSH SSH Server 服务已经启动成功。 停止 SSH 服务net stop sshd net stop sshd OpenSSH SSH Server 服务已成功停止。 ##　在 Windows 中为 OpenSSH 配置默认 shell PowerShell 管理员运行： New-ItemProperty -Path \"HKLM:\\SOFTWARE\\OpenSSH\" -Name DefaultShell -Value \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -PropertyType String -Force SSH客户端 命令ssh username@127.0.0.1即ssh 用户名@用户ip ","date":"2019-11-13","objectID":"/windows%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:0","tags":["windows","ssh"],"title":"windows开启SSH服务器","uri":"/windows%E5%BC%80%E5%90%AFssh%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["C++"],"content":"调用约定 _stdcall,_cdecl _stdcall调用 按C编译方式，_stdcall调用约定在输出函数名前面加下划线，后面加“@”符号和参数的字节数，形如_func@12 _cdecl调用 _cdecl是C/C++的缺省调用方式，参数采用从右到左的压栈方式，由调用者完成压栈操作 ，传送参数的内存栈由调用者维护。 _cedcl约定的函数只能被C/C++调用，每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。 按C编译方式，_cdecl调用约定仅在输出函数名前面加下划线，形如_functionname。 区别 在跨（开发） 平台的调用中，我们都使用_stdcall（虽然有时是以WINAPI的样子出现）。当遇到这样的函数如 fprintf()它的参数是可变的，不定长的，被调用者事先无法知道参数的长度，事后的清除工作也无法正常的进行，因此，这种情况我们只能使用 _cdecl。如果你的程序中没有涉及可变参数，最好使用__stdcall关键字。 //add.cpp int __stdcall Add(int a, int b) { return a + b; } //__stdcall可不写,但是要在项目中设置 导出Add.dll方式有两种 ","date":"2019-11-08","objectID":"/vc-%E5%AF%BC%E5%87%BAdll%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/:0:0","tags":["c++","dll"],"title":"VC++导出Dll常见方法","uri":"/vc-%E5%AF%BC%E5%87%BAdll%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"},{"categories":["C++"],"content":"1-模块定义(.def) 文件声明,函数名不变化 LIBRARY Add EXPORTS Add @1 ","date":"2019-11-08","objectID":"/vc-%E5%AF%BC%E5%87%BAdll%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/:1:0","tags":["c++","dll"],"title":"VC++导出Dll常见方法","uri":"/vc-%E5%AF%BC%E5%87%BAdll%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"},{"categories":["C++"],"content":"2-导出函数 _declspec(dllexport) //add.h头文件 #ifndef ADD_H #define ADD_H #ifdef __cplusplus // if used by C++ code extern \"C\" { // we need to export the C interface #endif __declspec(dllexport) int Add(int a, int b); #ifdef __cplusplus } #endif #endif ","date":"2019-11-08","objectID":"/vc-%E5%AF%BC%E5%87%BAdll%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/:2:0","tags":["c++","dll"],"title":"VC++导出Dll常见方法","uri":"/vc-%E5%AF%BC%E5%87%BAdll%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"},{"categories":["git"],"content":"git push常见问题 ","date":"2019-10-08","objectID":"/git-psuh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/:0:0","tags":["git","error"],"title":"git push常见问题","uri":"/git-psuh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"categories":["git"],"content":"fatal: refusing to merge unrelated histories 在git pull或者git push中都有可能会遇到，这是因为两个分支没有取得关系，解决办法是在操作命令后面加--allow-unrelated-histories ","date":"2019-10-08","objectID":"/git-psuh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/:1:0","tags":["git","error"],"title":"git push常见问题","uri":"/git-psuh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"categories":["git"],"content":"error: failed to push some refs to 解决方案：首先git pull origin master --allow-unrelated-histories ","date":"2019-10-08","objectID":"/git-psuh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/:2:0","tags":["git","error"],"title":"git push常见问题","uri":"/git-psuh%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"categories":["数学"],"content":"计算的极限（零）：逻辑与图灵机 计算的极限（一）：所有机器的机器，与无法计算的问题 计算的极限（二）：自我指涉与不可判定 计算的极限（三）：函数构成的世界 计算的极限（四）：机械计算的圭臬 计算的极限（五）：有限的障壁 计算的极限（六）：无穷的彼岸 计算的极限（七）：宛如神谕 计算的极限（八）：符号的框架 计算的极限（九）：叹息与奋斗 计算的极限（十）：无限绵延的层级 计算的极限（十一）：黄金时代 计算的极限（十二）：不会出错的程序 计算的极限（十三）：数字空间的幽灵 作者 ","date":"2019-04-26","objectID":"/%E8%AE%A1%E7%AE%97%E7%9A%84%E6%9E%81%E9%99%90/:0:0","tags":["数学","历史"],"title":"计算的极限","uri":"/%E8%AE%A1%E7%AE%97%E7%9A%84%E6%9E%81%E9%99%90/"},{"categories":["哲学"],"content":"哥德尔不完备定理 在数理逻辑中，哥德尔不完备定理是库尔特·哥德尔于1931年证明并发表的两条定理。简单地说，第一条定理指出： 任何兼容的形式系统，只要蕴涵皮亚诺算术公理，就可以在其中构造在体系中不能被证明的真命题，因此通过推演不能得到所有真命题（即体系是不完备的）。 把第一条定理的证明过程在体系内部形式化后，哥德尔证明了第二条定理。该定理指出： 任何逻辑自洽的形式系统，只要蕴涵皮亚诺算术公理，它就不能用于证明它本身的兼容性。 道德经第一章 “道”如果可以用言语来表述，那它就是常“道”(“道”是可以用言语来表述的，它并非一般的“道”)；“名”如果可以用文辞去命名，那它就是常“名”(“名”也是可以说明的，它并非普通的“名”)。“无”可以用来表述天地浑沌未开之际的状况；而“有”，则是宇宙万物产生之本原的命名。因此，要常从“无”中去观察领悟“道”的奥妙；要常从“有”中去观察体会“道”的端倪。无与有这两者，来源相同而名称相异，都可以称之为玄妙、深远。它不是一般的玄妙、深奥，而是玄妙又玄妙、深远又深远，是宇宙天地万物之奥妙的总门(从“有名”的奥妙到达无形的奥妙，“道”是洞悉一切奥妙变化的门径)。 人的“确定感” 人们所坚持的完全确定的态度会使他们放弃对不同意见的思考，而这种“确定感”往往是一个彻底的错误；如果人们开始质疑“确定感”的本质，意识到人类的思维的局限性，那么，我们可能就会展现出某种程度的宽容，并乐于思考不同的观点。一旦人们思想渐趋开明，就可能为许多看似无法解决的困境提供解决的契机。 感悟 人们总是相信自己所相信，所以说出的话也是自以为对的，这不仅在体现在人们的生活中，而且也体现在科学当中，不同的是科学可以改正自己的错误，但生活却不一样，因为没有一个标准，所以人们认为自己就是对的，他们相信社会带给他们的价值观，周围环境给他们的价值观，这样他们就没有思考的负担，随大流走完一生，却不知自己一生都在干什么。 ","date":"2019-04-25","objectID":"/%E4%BA%BA%E7%B1%BB%E6%80%9D%E7%BB%B4%E7%9A%84%E5%B1%80%E9%99%90/:0:0","tags":["哲学"],"title":"思维局限","uri":"/%E4%BA%BA%E7%B1%BB%E6%80%9D%E7%BB%B4%E7%9A%84%E5%B1%80%E9%99%90/"},{"categories":["JavaScript"],"content":"闭包 ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:0:0","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"定义 闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所能访问的所有局部变量。 ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:1:0","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"实质 将函数当作对象处理，栈（Stack）内存没有释放，没有完成GC操作 ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:2:0","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"实例 ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:3:0","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"共享函数定义 function makeAdder(x) { return function(y) { return x + y; }; } var add5 = makeAdder(5); var add10 = makeAdder(10); //在makeAdder中共享函数定义 console.log(add5(2)); // 7 console.log(add10(2)); // 12 ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:3:1","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"模拟私有方法 var makeCounter = function() { var privateCounter = 0; function changeBy(val) { privateCounter += val; } return { increment: function() { changeBy(1); }, decrement: function() { changeBy(-1); }, value: function() { return privateCounter; } } }; var Counter1 = makeCounter(); var Counter2 = makeCounter(); console.log(Counter1.value()); /* logs 0 */ Counter1.increment(); Counter1.increment(); console.log(Counter1.value()); /* logs 2 */ Counter1.decrement(); console.log(Counter1.value()); /* logs 1 */ console.log(Counter2.value()); /* logs 0 */ ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:3:2","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"解决var作用域问题 \u003cp id=\"help\"\u003eHelpful notes will appear here\u003c/p\u003e \u003cp\u003eE-mail: \u003cinput type=\"text\" id=\"email\" name=\"email\"\u003e\u003c/p\u003e \u003cp\u003eName: \u003cinput type=\"text\" id=\"name\" name=\"name\"\u003e\u003c/p\u003e \u003cp\u003eAge: \u003cinput type=\"text\" id=\"age\" name=\"age\"\u003e\u003c/p\u003e \u003cscript\u003e function showHelp(help) { document.getElementById('help').innerHTML = help; } function setupHelp() { var helpText = [ {'id': 'email', 'help': 'Your e-mail address'}, {'id': 'name', 'help': 'Your full name'}, {'id': 'age', 'help': 'Your age (you must be over 16)'} ]; for (var i = 0; i \u003c helpText.length; i++) { var item = helpText[i]; document.getElementById(item.id).onfocus = function() { showHelp(item.help); } } } setupHelp(); \u003c/script\u003e 代码运行后，循环在事件触发前执行完毕，item全部指向最后一项 解决方案：使用闭包创建私有变量 function showHelp(help) { document.getElementById('help').innerHTML = help; } function setupHelp() { var helpText = [ {'id': 'email', 'help': 'Your e-mail address'}, {'id': 'name', 'help': 'Your full name'}, {'id': 'age', 'help': 'Your age (you must be over 16)'} ]; for (var i = 0; i \u003c helpText.length; i++) { (function() { var item = helpText[i]; document.getElementById(item.id).onfocus = function() { showHelp(item.help); } })(); // 马上把当前循环项的item与事件回调相关联起来 } } setupHelp(); ES6 let方案 function showHelp(help) { document.getElementById('help').innerHTML = help; } function setupHelp() { var helpText = [ {'id': 'email', 'help': 'Your e-mail address'}, {'id': 'name', 'help': 'Your full name'}, {'id': 'age', 'help': 'Your age (you must be over 16)'} ]; for (var i = 0; i \u003c helpText.length; i++) { let item = helpText[i]; document.getElementById(item.id).onfocus = function() { showHelp(item.help); } } } setupHelp(); ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:3:3","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"性能问题 使用闭包会加大内存消耗和减慢脚本的处理速度，因此应该尽量避免使用闭包。 总结自MDN ","date":"2019-04-16","objectID":"/%E9%97%AD%E5%8C%85/:4:0","tags":["JavaScript","编程"],"title":"闭包","uri":"/%E9%97%AD%E5%8C%85/"},{"categories":["JavaScript"],"content":"关于 ES6 中的箭头函数，网上有很多文章解释其作用和语法，如果你刚开始接触 ES6，可以从这里开始。任何事物都具有两面性，语言的新特性常常被误解、滥用，比如箭头函数的使用就存在很多误区。接下来，笔者会通过实例介绍该避免使用箭头函数的场景，以及在这些场景下该如何使用函数表达式（function expressions）、函数声明或者方法简写（shorthand method）来保障代码正确性和可读性。 ","date":"2019-04-13","objectID":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/:0:0","tags":["JavaScript","编程"],"title":"箭头函数","uri":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"categories":["JavaScript"],"content":"1. 定义对象方法 JS 中对象方法的定义方式是在对象上定义一个指向函数的属性，当方法被调用的时候，方法内的 this 就会指向方法所属的对象。 1.1 定义字面量方法 因为箭头函数的语法很简洁，可能不少同学会忍不住用它来定义字面量方法，比如下面的例子 JS Bin： const calculator = { array: [1, 2, 3], sum: () =\u003e { console.log(this === window); // =\u003e true return this.array.reduce((result, item) =\u003e result + item); } }; console.log(this === window); // =\u003e true // Throws \"TypeError: Cannot read property 'reduce' of undefined\" calculator.sum(); calculator.sum 使用箭头函数来定义，但是调用的时候会抛出 TypeError，因为运行时 this.array 是未定义的，调用 calculator.sum 的时候，执行上下文里面的 this 仍然指向的是 window，原因是箭头函数把函数上下文绑定到了 window 上，this.array 等价于 window.array，显然后者是未定义的。 解决的办法是，使用函数表达式或者方法简写（ES6 中已经支持）来定义方法，这样能确保 this 是在运行时是由包含它的上下文决定的，修正后的代码如下 JS Bin： const calculator = { array: [1, 2, 3], sum() { console.log(this === calculator); // =\u003e true return this.array.reduce((result, item) =\u003e result + item); } }; calculator.sum(); // =\u003e 6 这样 calculator.sum 就变成了普通函数，执行时 this 就指向 calculator 对象，自然能得到正确的计算结果。 1.2 定义原型方法 同样的规则适用于原型方法（prototype method）的定义，使用箭头函数会导致运行时的执行上下文错误，比如下面的例子 JS Bin： function Cat(name) { this.name = name; } Cat.prototype.sayCatName = () =\u003e { console.log(this === window); // =\u003e true return this.name; }; const cat = new Cat('Mew'); cat.sayCatName(); // =\u003e undefined 使用传统的函数表达式就能解决问题 JS Bin： function Cat(name) { this.name = name; } Cat.prototype.sayCatName = function () { console.log(this === cat); // =\u003e true return this.name; }; const cat = new Cat('Mew'); cat.sayCatName(); // =\u003e 'Mew' sayCatName 变成普通函数之后，被调用时的执行上下文就会指向新创建的 cat 实例。 ","date":"2019-04-13","objectID":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/:1:0","tags":["JavaScript","编程"],"title":"箭头函数","uri":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"categories":["JavaScript"],"content":"2. 定义事件回调函数 this 是 JS 中很强大的特性，可以通过多种方式改变函数执行上下文，JS 内部也有几种不同的默认上下文指向，但普适的规则是在谁上面调用函数 this 就指向谁，这样代码理解起来也很自然，读起来就像在说，某个对象上正在发生某件事情。 但是，箭头函数在声明的时候就绑定了执行上下文，要动态改变上下文是不可能的，在需要动态上下文的时候它的弊端就凸显出来。比如在客户端编程中常见的 DOM 事件回调函数（event listenner）绑定，触发回调函数时 this 指向当前发生事件的 DOM 节点，而动态上下文这个时候就非常有用，比如下面这段代码试图使用箭头函数来作事件回调函数 JS Bin： const button = document.getElementById('myButton'); button.addEventListener('click', () =\u003e { console.log(this === window); // =\u003e true this.innerHTML = 'Clicked button'; }); 在全局上下文下定义的箭头函数执行时 this 会指向 window，当单击事件发生时，浏览器会尝试用 button 作为上下文来执行事件回调函数，但是箭头函数预定义的上下文是不能被修改的，这样 this.innerHTML 就等价于 window.innerHTML，而后者是没有任何意义的。 使用函数表达式就可以在运行时动态的改变 this，修正后的代码 JS Bin： const button = document.getElementById('myButton'); button.addEventListener('click', function() { console.log(this === button); // =\u003e true this.innerHTML = 'Clicked button'; }); 当用户单击按钮时，事件回调函数中的 this 实际指向 button，这样的 this.innerHTML = ‘Clicked button’ 就能按照预期修改按钮中的文字。 ","date":"2019-04-13","objectID":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/:2:0","tags":["JavaScript","编程"],"title":"箭头函数","uri":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"categories":["JavaScript"],"content":"3. 定义构造函数 构造函数中的 this 指向新创建的对象，当执行 new Car() 的时候，构造函数 Car 的上下文就是新创建的对象，也就是说 this instanceof Car === true。显然，箭头函数是不能用来做构造函数， 实际上 JS 会禁止你这么做，如果你这么做了，它就会抛出异常。 换句话说，箭头构造函数的执行并没有任何意义，并且是有歧义的。比如，当我们运行下面的代码 JS Bin： const Message = (text) =\u003e { this.text = text; }; // Throws \"TypeError: Message is not a constructor\" const helloMessage = new Message('Hello World!'); 构造新的 Message 实例时，JS 引擎抛了错误，因为 Message 不是构造函数。在笔者看来，相比旧的 JS 引擎在出错时悄悄失败的设计，ES6 在出错时给出具体错误消息是非常不错的实践。可以通过使用函数表达式或者函数声明 来声明构造函数修复上面的例子 JS Bin： const Message = function(text) { this.text = text; }; const helloMessage = new Message('Hello World!'); console.log(helloMessage.text); // =\u003e 'Hello World!' ","date":"2019-04-13","objectID":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/:3:0","tags":["JavaScript","编程"],"title":"箭头函数","uri":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"categories":["JavaScript"],"content":"4. 追求过短的代码 箭头函数允许你省略参数两边的括号、函数体的花括号、甚至 return 关键词，这对编写更简短的代码非常有帮助。这让我想起大学计算机老师给学生留过的有趣作业：看谁能使用 C 语言编写出最短的函数来计算字符串的长度，这对学习和探索新语言特性是个不错的法子。但是，在实际的软件工程中，代码写完之后会被很多工程师阅读，真正的 write once, read many times，在代码可读性方面，最短的代码可能并不总是最好的。一定程度上，压缩了太多逻辑的简短代码，阅读起来就没有那么直观，比如下面的例子 JS Bin： const multiply = (a, b) =\u003e b === undefined ? b =\u003e a * b : a * b; const double = multiply(2); double(3); // =\u003e 6 multiply(2, 3); // =\u003e 6 multiply 函数会返回两个数字的乘积或者返回一个可以继续调用的固定了一个参数的函数。代码看起来很简短，但大多数人第一眼看上去可能无法立即搞清楚它干了什么，怎么让这段代码可读性更高呢？有很多办法，可以在箭头函数中加上括号、条件判断、返回语句，或者使用普通的函数 JS Bin： function multiply(a, b) { if (b === undefined) { return function (b) { return a * b; } } return a * b; } const double = multiply(2); double(3); // =\u003e 6 multiply(2, 3); // =\u003e 6 为了让代码可读性更高，在简短和啰嗦之间把握好平衡是非常有必要的。 ","date":"2019-04-13","objectID":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/:4:0","tags":["JavaScript","编程"],"title":"箭头函数","uri":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"categories":["JavaScript"],"content":"5. 总结 箭头函数无疑是 ES6 带来的重大改进，在正确的场合使用箭头函数能让代码变的简洁、短小，但某些方面的优势在另外一些方面可能就变成了劣势，在需要动态上下文的场景中使用箭头函数你要格外的小心，这些场景包括：定义对象方法、定义原型方法、定义构造函数、定义事件回调函数。 ","date":"2019-04-13","objectID":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/:5:0","tags":["JavaScript","编程"],"title":"箭头函数","uri":"/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"},{"categories":["Termux"],"content":"Termux 高级终端安装使用配置教程,这篇文章拖了有小半年.因为网上相关的文章相对来说还是比较少的,恰好今天又刷了机,所以就特意来总结一下,希望本文可以帮助到其他的小伙伴.发挥Android平台更大的DIY空间. 简介 Termux是一个Android下一个高级的终端模拟器,开源且不需要root,支持apt管理软件包，十分方便安装软件包,完美支持Python,PHP,Ruby,Go,Nodejs,MySQL等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准,用心去打造完全可以把手机变成一个强大的工具. 官网 Github项目地址 Google Play下载地址 Google Play下载的版本比酷安要新,有能力建议下载Google PLay版本的. 基本操作 ","date":"2019-03-18","objectID":"/termux/:0:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"长按屏幕 显示菜单项（包括复制、粘贴、更多），此时屏幕出现可选择的复制光标 长按屏幕 ├── COPY:复制 ├── PASTE:更多 ├── More:更多 ├── Select URL: 选择网址 └── Share transcipt: 分享命令脚本 └── Reset: 重置 └── Kill process: 杀掉当前终端会话进程 └── Style: 风格配色 └── Help: 帮助文档 ","date":"2019-03-18","objectID":"/termux/:1:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"从左向右滑动 显示隐藏式导航栏，可以新建、切换、重命名会话session和调用弹出输入法 ","date":"2019-03-18","objectID":"/termux/:2:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"显示扩展功能按键 扩展功能键是什么?就是PC端常用的按键如:ESC键，CTR键，TAB键,但是手机上难以操作的一些按键. 效果图 ","date":"2019-03-18","objectID":"/termux/:3:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"方法一 从左向右滑动,显示隐藏式导航栏,长按左下角的KEYBOARD. ","date":"2019-03-18","objectID":"/termux/:3:1","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"方法二 使用Termux快捷键:音量++Q键 常用快捷键\" 常用快捷键\"\u003e常用快捷键 Ctrl键是终端用户常用的按键 - 但大多数触摸键盘都没有这个按键。为此，Termux使用音量减小按钮来模拟Ctrl键。 例如，在触摸键盘上按音量减小+ L发送与在硬件键盘上按Ctrl + L相同的输入。 Ctrl+A -\u003e 将光标移动到行首 Ctrl+C -\u003e 中止当前进程 Ctrl+D -\u003e 注销终端会话 Ctrl+E -\u003e 将光标移动到行尾 Ctrl+K -\u003e 从光标删除到行尾 Ctrl+L -\u003e 清除终端 Ctrl+Z -\u003e 挂起（发送SIGTSTP到）当前进程 音量加键也可以作为产生特定输入的特殊键. 音量加+E -\u003e Esc键 音量加+T -\u003e Tab键 音量加+1 -\u003e F1（和音量增加+ 2→F2等） 音量加+0 -\u003e F10 音量加+B -\u003e Alt + B，使用readline时返回一个单词 音量加+F -\u003e Alt + F，使用readline时转发一个单词 音量加+X -\u003e Alt+X 音量加+W -\u003e 向上箭头键 音量加+A -\u003e 向左箭头键 音量加+S -\u003e 向下箭头键 音量加+D -\u003e 向右箭头键 音量加+L -\u003e | （管道字符） 音量加+H -\u003e 〜（波浪号字符） 音量加+U -\u003e _ (下划线字符) 音量加+P -\u003e 上一页 音量加+N -\u003e 下一页 音量加+. -\u003e Ctrl + \\（SIGQUIT） 音量加+V -\u003e 显示音量控制 音量加+Q -\u003e 显示额外的按键视图 基本命令 Termux除了支持apt命令外,还在此基础上封装了pkg命令,pkg命令向下兼容apt命令.apt命令大家应该都比较熟悉了,这里直接简单的介绍下pkg命令: pkg search \u003cquery\u003e 搜索包 pkg install\u003cpackage\u003e 安装包 pkg uninstall \u003cpackage\u003e 卸载包 pkg reinstall \u003cpackage\u003e 重新安装包 pkg update 更新源 pkg upgrade 升级软件包 pkg list-all 列出可供安装的所有包 pkg list-installed 列出已经安装的包 pkg shoe \u003cpackage\u003e 显示某个包的详细信息 pkg files \u003cpackage\u003e 显示某个包的相关文件夹路径 目录环境结构 ~ \u003eecho$HOME /data/data/com.termux/files/home ~ \u003eecho$PREFIX /data/data/com.termux/files/usr ~ \u003eecho$TMPPREFIX /data/data/com.termux/files/usr/tmp/zsh 长期使用Linux的朋友可能会发现，这个HOME路径看上去可能不太一样,为了方便,Termux 提供了一个特殊的环境变量:PREFIX 更换国内源 更换Termux清华大学源,加快软件包下载速度. ","date":"2019-03-18","objectID":"/termux/:3:2","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"设置默认编辑器 export EDITOR=vi ","date":"2019-03-18","objectID":"/termux/:4:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"编辑源文件 apt edit-sources 将原来的https://termux.net官方源替换为http://mirrors.tuna.tsinghua.edu.cn/termux 保存并退出 ","date":"2019-03-18","objectID":"/termux/:5:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"直接编辑源文件 上面是官方推荐的方法,其实还有更简单的方法,类似于Linux下直接去编辑源文件: vi$PREFIX/etc/apt/sources.list 安装基本工具 pkg update pkg install vim curl wgetgit unzip unrar Termux优化 ","date":"2019-03-18","objectID":"/termux/:6:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"终端配色 主要使用了zsh来替代bash作为默认shell. 使用一键安装脚本来安装,一步到位,顺便启动了外置存储,可以直接访问SD卡下的目录. 执行下面这个命令确保已经安装好了curl sh -c \"$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)\" Android6.0以上会弹框确认是否授权,允许授权后Termux可以方便的访问SD卡文件. 脚本允许后先后有如下两个选项: Enter a number, leave blank to not to change: 14 Enter a number, leave blank to not to change: 6 分别选择背景色和字体 想要继续更改挑选配色的话,继续运行脚本来再次筛选: $ ~/termux-ohmyzsh/install.sh exit重启sessions会话生效配置 ","date":"2019-03-18","objectID":"/termux/:7:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"访问外置存储优化 执行过上面的zsh一键配置脚本后,并且授予文件访问权限的话,会在家目录生成storage目录，并且生成若干目录，软连接都指向外置存储卡的相应目录 创建QQ文件夹软连接 手机上一般经常使用手机QQ来接收文件,这里为了方便文件传输,直接在storage目录下创建软链接. QQ ln -s /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv QQ TIM ln -s /data/data/com.termux/files/home/storage/shared/tencent/TIMfile_recv TIM 最后效果图如下: 这样可以直接在home目录下去访问QQ文件夹,非常方便文件的传输,大大提升了工作效率. http://mirrors.tuna.tsinghua.edu.cn/termux ","date":"2019-03-18","objectID":"/termux/:8:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"oh-my-zsh主题配色\" oh my zsh主题配色\"\u003eoh my zsh主题配色 编辑.zshrc配置文件 $ vim .zshrc 第一行可以看到,默认的主题是agnoster主题: 在.oh-my-zsh/themes目录下放着oh-my-zsh所有的主题配置文件. 下面是国光认为还不错的几款主题 agnoster robbyrussell jaischeema re5et junkfood cloud random 当然如果你是个变态的话,可以尝试random主题,每打开一个会话配色主题都是随机的. ZSH_THEME=\"random\" ","date":"2019-03-18","objectID":"/termux/:9:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"修改启动问候语 默认的启动问候语如下: 这个对于初学者有一定的帮助在前期,随着对Termux的熟悉,这个默认的问候语就会显得比较臃肿. 编辑问候语文件直接修改问候语: vim $PREFIX/etc/motd 修改完的效果如下: 这样启动新的会话的时候看上去就会简洁很多. 管理员身份 ","date":"2019-03-18","objectID":"/termux/:10:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"手机没有root 利用proot工具来模拟某些需要root的环境 pkg install proot 然后终端下面输入: termux-chroot 即可模拟root环境 在这个proot环境下面,相当于是进入了home目录,可以很方便地进行一些配置. 在管理员身份下，输入exit可回到普通用户身份。 ","date":"2019-03-18","objectID":"/termux/:11:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"手机已经root 安装tsu,这是一个su的termux版本,用来在termux上替代su: pkg install tsu 然后终端下面输入: tsu 即可切换root用户,这个时候会弹出root授权提示,给予其root权限,效果图如下: 在管理员身份下，输入exit可回到普通用户身份。 信息安全 因为termux可以很好的支持Python,所以几乎所有用Python编写的安全工具都是可以完美的运行使用的. 总的来说可玩性还是比较高的. ","date":"2019-03-18","objectID":"/termux/:12:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"Metasploit 安装Ｍetasploit Termux官方提供的自动话脚本安装方法如下: cd ～ pkg install wget wget https://Auxilus.github.io/metasploit.sh bash metasploit.sh 注　在x86平台下自动化安装失败，想在x86平台下安装的参考　官方的文档 手动去安装．　 这个过程平均耗时大约3分钟左右（使用国内的清华源的情况下）．　配置msf数据库缓存 意外发现数据库居然都配置好了，启动msfconsole会自动连接数据库了．　接下来重建数据库缓存 msf \u003e db_rebuild_cache 这个时候立刻去搜索发现缓存依然没有建立，只能使用慢速搜索，这里其实是这个缓存建立需要时间，只要稍微等待一下就可以了． 国光以前这里做过测试，缓存建立的平均时间是3分钟左右． 然后就可以实现msf秒搜索的效果了，无需等待，感觉比电脑上还要快呐　","date":"2019-03-18","objectID":"/termux/:13:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"解决metasploit启动后无法连接数据库 使用自动化脚本安装好Metasploit后使用db_status发现数据库是处于连接状态的,然后在使用db_rebuild_cache重新建立缓存,等待大约3分钟后,便可以使用快速搜索了,没毛病~ 但是 在一段日子过后,可能会出现以下情况: msfconsole [-] Failed to connect to the database: could not connect to server: Connection refused Is the server running on host \"127.0.0.1\" and accepting TCP/IP connections on port 5432? 报这个错误是因为postgresql数据库没有启动造成的.解决方法就是启动数据库: 本方法只针对termux上使用自动化脚本安装msf pg_ctl -D $PREFIX/var/lib/postgresql start 启动数据库后重新进入msfconsole会发现启动没有报错了,db_status查看下数据库连接,也正常了: ","date":"2019-03-18","objectID":"/termux/:13:1","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"Nmap\" Nmap\"\u003eNmap 端口扫描必备工具 pkg install nmap ","date":"2019-03-18","objectID":"/termux/:14:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"hydra Hydra是著名的黑客组织THC的一款开源暴力破解工具这是一个验证性质的工具，主要目的是：展示安全研究人员从远程获取一个系统认证权限。 pkg install hydra ","date":"2019-03-18","objectID":"/termux/:15:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"sslscan SSLscan主要探测基于ssl的服务，如https。SSLscan是一款探测目标服务器所支持的SSL加密算法工具。 SSlscan的代码托管在Github pkg install sslscan ","date":"2019-03-18","objectID":"/termux/:16:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"whatportis whatportis是一款可以通过服务查询默认端口，或者是通过端口查询默认服务的工具，简单易用。在渗透测试过程中，如果需要查询某个端口绑定什么服务器，或者某个应用绑定的默认端口，可以使用whatportis查询。 pip2 install whatportis ","date":"2019-03-18","objectID":"/termux/:17:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"SQLmap SQLmap是一款用来检测与利用SQL注入漏洞的免费开源工具 官方项目地址 直接git clone源码 git clone https://github.com/sqlmapproject/sqlmap.git cd sqlmap python2 sqlmap.py sqlmap支持pip安装了,所以建议直接 pip install sqlmap 来进行安装,然后终端下直接sqlmap就可以了,十分方便. ","date":"2019-03-18","objectID":"/termux/:18:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"RouterSploit RouteSploit框架是一款开源的路由器等嵌入式设备漏洞检测及利用框架。 pip2 install requests git clone https://github.com/reverse-shell/routersploit cd routersploit python2 rsf.py ","date":"2019-03-18","objectID":"/termux/:19:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"Slowloris 低带宽的DoS工具 git clone https://github.com/gkbrk/slowloris.git cd slowloris chmod +x slowloris.py ","date":"2019-03-18","objectID":"/termux/:20:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"RED-HAWK 一款采用PHP语言开发的多合一型渗透测试工具，它可以帮助我们完成信息采集、SQL漏洞扫描和资源爬取等任务。 pkg install php git clone https://github.com/Tuhinshubhra/RED_HAWK.git cd RED_HAWK php rhawk.php ","date":"2019-03-18","objectID":"/termux/:21:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"Cupp Cupp是一款用Python语言写成的可交互性的字典生成脚本。尤其适合社会工程学，当你收集到目标的具体信息后，你就可以通过这个工具来智能化生成关于目标的字典。 git clone https://github.com/Mebus/cupp.git cd cupp python2 cupp.py ","date":"2019-03-18","objectID":"/termux/:22:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"Hash-Buster Hash Buster是一个用python编写的在线破解Hash的脚本，官方说5秒内破解,速度实际测试还不错哦~ git clone https://github.com/UltimateHackers/Hash-Buster.git cd Hash-Buster python2 hash.py ","date":"2019-03-18","objectID":"/termux/:23:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"D-TECT D-TECT是一个用Python编写的先进的渗透测试工具, wordpress用户名枚举 敏感文件检测 子域名爆破 端口扫描 Wordperss扫描 XSS扫描 SQL注入扫描等 git clone https://github.com/shawarkhanethicalhacker/D-TECT.git cd D-TECT python2 d-tect.py ","date":"2019-03-18","objectID":"/termux/:24:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"WPSeku WPSeku 是一个用 Python 写的简单的 WordPress 漏洞扫描器，它可以被用来扫描本地以及远程安装的 WordPress 来找出安全问题。被评为2017年最受欢迎的十大开源黑客工具. git clone https://github.com/m4ll0k/WPSeku.git cd WPSeku pip3 install -r requirements.txt python3 wpseku.py ","date":"2019-03-18","objectID":"/termux/:25:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"XSStrike XSStrike是一种先进的XSS检测工具。它具有强大的模糊测试引擎. git clone https://github.com/UltimateHackers/XSStrike.git cd XSStrike pip2 install -r requirements.txt python2 xsstrike ","date":"2019-03-18","objectID":"/termux/:26:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"小结 因为Termux完美的支持Python和Perl等语言,所以有太多优秀的信息安全工具值得大家去发现了,这里我就不一一列举了. Python环境部署 ","date":"2019-03-18","objectID":"/termux/:27:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装python2-7 pkg install python2 安装完成后,使用python2命令启动python 2.7.14环境. ","date":"2019-03-18","objectID":"/termux/:28:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装python3 pkg install python 安装完成后,使用python命令启动python 3.6.5环境. ","date":"2019-03-18","objectID":"/termux/:29:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"升级pip版本 python2 -m pip install --upgrade pip python -m pip install --upgrade pip 这两条命令分别升级了pip2和pip3到最新版. pip版本查看 ","date":"2019-03-18","objectID":"/termux/:30:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"ipython ipython是一个python的交互式shell，支持变量自动补全，自动缩进，支持bash shell命令，内置了许多很有用的功能和函数。学习ipython将会让我们以一种更高的效率来使用python。 先安装clang,否则直接使用pip安装ipython会失败报错. pkg install clang pip install ipython pip3.6 install ipython 然后分别使用ipython和ipython2进入py2和py3控制台: ","date":"2019-03-18","objectID":"/termux/:31:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"编辑器 终端下有vim神器,并且官方也已经封装了vim-python,对vim进行了Python相关的优化. pkg install vim-python 解决termux下的vim汉字乱码 在家目录下,新建.vimrc文件 vim .vimrc 添加内容如下: set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1 set enc=utf8 set fencs=utf8,gbk,gb2312,gb18030 然后source下变量: source .vimrc 效果图 nodejs ","date":"2019-03-18","objectID":"/termux/:32:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装nodejs pkg install nodejs 安装比较方便,但是在安装的时候报错了 Cannot read property \u0026#39;length\u0026#39; of undefined 查了下是这边版本的问题 官方的解决方法如下 disable concurrency in case of libuv/libuv#1459 ","date":"2019-03-18","objectID":"/termux/:33:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"解决npm安装报错 vim $PREFIX/lib/node_modules/npm/node_modules/worker-farm/lib/farm.js 我这里修改length的是4,这个好像和CPU有关,总之这里的length得指定一个数字. 然后在重新安装下npm install hexo-cli -g成功. MariaDB-MySQL-安装 MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 ","date":"2019-03-18","objectID":"/termux/:34:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装mariadb pkg install mariadb ","date":"2019-03-18","objectID":"/termux/:35:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装基本数据 mysql_install_db ","date":"2019-03-18","objectID":"/termux/:36:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"启动mariadb服务 mysqld 启动完成后,这个会话就一直存活,类似与debug调试一样,只有新建会话才可以操作. 关于隐藏会话可以使用nohup命令和tmux命令,这里我建议使用tmux命令 ","date":"2019-03-18","objectID":"/termux/:37:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"新建termux会话 由于mariadb安装的时候没有设置密码,当前的mariadb密码为空. mysql 直接进入mariadb数据库.输入exit退出数据库. ","date":"2019-03-18","objectID":"/termux/:38:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"修改密码\" 修改密码\"\u003e修改密码 输入一下命令,进行密码相关的安全设置: mysql_secure_installation 输入当前输入密码 因为是空密码,这里默认 回车 Enter current password for root (enter for none): 设置新密码 这里设置新的root密码 Set root password? [Y/n] y New password: Re-enter new password: 其他设置 下面根据个人偏好来进行设置,没有绝对的要求 Remove anonymous users? [Y/n] Y #是否移除匿名用户 Disallow root login remotely? [Y/n] n #是否不允许root远程登录 Remove test database and access to it? [Y/n] n #是否移除test数据库 Reload privilege tables now? [Y/n] y #是否重新加载表的权限 ","date":"2019-03-18","objectID":"/termux/:39:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"使用密码登录数据库\" 使用密码登录数据库\"\u003e使用密码登录数据库 $ mysql -uroot -p Enter password: ***apache2 tmux Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。一旦你熟悉了 tmux 后， 它就像一个加速器一样加速你的工作效率。 ","date":"2019-03-18","objectID":"/termux/:40:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装tmux pkg install tmux ","date":"2019-03-18","objectID":"/termux/:41:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"新建mysql会话 上面介绍的mysqld后会一直卡在那里,强迫症表示接受不了,重启手机,现在尝试使用tmux来管理会话. tmux new -s mysql 可以看到最下面的提示,表明现在是在mysql的会话下面操作 ","date":"2019-03-18","objectID":"/termux/:42:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"启动mysqld并断开会话 启动mysqld mysqld 让会话后台运行 使用快捷键组合Ctrl+b + d，三次按键就可以断开当前会话。 ","date":"2019-03-18","objectID":"/termux/:43:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"使用mysql 现在那个mysqld会话被放在后台运行了,整个界面看上去很简介,使用 mysql -uroot -p 可以优雅的使用数据库了. 效果图 关于tmux更多进阶的用法这里不在过多介绍了. php termux封装的php版本是php 7.2.5 ","date":"2019-03-18","objectID":"/termux/:44:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装PHP pkg install php 查看下版本 自PHP5.4之后 PHP内置了一个Web 服务器,来在termux下尝试下PHP Web Server的简单使. ","date":"2019-03-18","objectID":"/termux/:45:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"编写测试文件 在家目录下建一个www文件夹:mkdir www 在www文件夹下新建一个index.php文件,其内容为 \u003c?phpphpinfo();?\u003e ","date":"2019-03-18","objectID":"/termux/:46:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"启动WebServer php -S 127.0.0.1:8080 -t www/ 浏览器访问效果如下: nginx Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性. ","date":"2019-03-18","objectID":"/termux/:47:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装nginx包 pkg install nginx ","date":"2019-03-18","objectID":"/termux/:48:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"切换root用户 尝试下能不能解析默认的index.html主页 这个文件在termux上的默认位置为/data/data/com.termux/files/usr/share/nginx/html/index.html 切换root用户 默认的普通权限无法启动nginx,需要模拟root权限才可以 没有这个命令的话,手动安装pkg install proot包 termux-chroot 进入模拟的root环境 ","date":"2019-03-18","objectID":"/termux/:49:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"启动nginx 在模拟的root环境下启动nginx nginx termux上nginx默认的端口是8080 查看下8080端口是否在运行 netstat -an |grep 8080 然后手机本地直接访问:http://127.0.0.1:8080 查看下nginx是否正常启动. 效果图 这样一个默认的nginx服务就起来了,但是意义不大,得配置一下可以解析php才会有更大的意义. ","date":"2019-03-18","objectID":"/termux/:50:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"停止nginx服务 这里是直接杀掉占用端口的进程,具体端口以实际情况为准. fuser -k 8080/tcp ","date":"2019-03-18","objectID":"/termux/:51:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"重启nginx服务 nginx -s reload nginx解析PHP nginx解析PHP这里单独拿出一级标题来叙述,成功解析的话,下面安装wordpress等cms就会轻松很多. nginx本身不能处理PHP，它只是个web服务器，当接收到php请求后发给php解释器处理,nginx一般是把请求发fastcgi管理进程处理,PHP-FPM是一个PHP FastCGI管理器,所以这里得先安装php-fpm. 这里默已经安装了nginx和php,没有安装的话,使用pkg install php nginx来进行安装,参考上面部分进行配置 ","date":"2019-03-18","objectID":"/termux/:52:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装并配置php-fpm 安装php-fpm pkg install php-fpm 配置php-fpm 进入proot环境,然后编辑配置文件www.conf(先进proot可以更方便操作编写相关配置文件) termux-chroot vim /etc/php-fpm.d/www.conf 定位搜索listen找到 listen = /data/data/com.termux/files/usr/var/run/php-fpm.sock 将其改为 listen = 127.0.0.1:9000 ","date":"2019-03-18","objectID":"/termux/:53:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"配置nginx 在proot环境下,然后编辑配置文件nginx.conf vim /etc/nginx/nginx.conf 下面给出已经配置好的模板文件,直接编辑替换整个文件即可: worker_processes 1; events { worker_connections 1024;} ​ http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; ​ server { listen 8080; server_name localhost; root /data/data/com.termux/files/usr/share/nginx/html; index index.html index.htm; ​ error_page 500 502 503 504 /50x.html; location = /50x.html { root /data/data/com.termux/files/usr/share/nginx/html;} ​ location ~ .php$ { root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /usr/share/nginx/html$fastcgi_script_name; include fastcgi_params;}}} 里面的网站默认路径就是nginx默认的网站根目录: root /data/data/com.termux/files/usr/share/nginx/html; fastcgi_param SCRIPT_FILENAME /usr/share/nginx/html$fastcgi_script_name; 要修改网站默认路径的话,只需要修改这两处即可. ","date":"2019-03-18","objectID":"/termux/:54:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"建立php测试文件 在/usr/share/nginx/html目录下新建一个phpinfo.php文件,其内容是:\u003c?php phpinfo();?\u003e went ","date":"2019-03-18","objectID":"/termux/:55:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"启动php-fpm和nginx 在proot环境下面分别启动php-fpm和nginx,这里的nginx不在proot环境下启动后会出一些问题,感兴趣的可以自己去研究看看. php-fpm nginx ","date":"2019-03-18","objectID":"/termux/:56:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"浏览器访问测试 浏览器访问http://127.0.0.1:8080/phpinfo.php 查询php文件是否解析了. 搭建WordPress 这里只是用wordpress做个典型安利来讲解,类似地可以安装Discuz,DeDecms等国内主流的PHP应用程序. ","date":"2019-03-18","objectID":"/termux/:57:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"方法一-使用PHP内置的Web-Server 确保安装并配置了php和mariadb,没有安装好的话,参考本文中具体细节部分来进行安装. 新建数据库 *** 这里是mysql的密码 mysql -uroot -p***-e\"create database wordpress;show databases;\" 下载解压wordpress wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.zip pkg install unzip unzip wordpress-4.9.4-zh_CN.zip 启动PHP Web Server 到解压后的wordpress目录下,执行 cd wordpress php -S 127.0.0.1:8080 然后浏览器访问127.0.0.1:8080开始进行wordperss的安装. 效果图 ","date":"2019-03-18","objectID":"/termux/:58:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"方法二-nginx-PHP-Mariadb 上面使用的方法一是直接使用PHP自带的PHP Web Server来运行的,看上去不够严谨~,所以这里用nginx来部署wordpress. 确保安装了PHP,php-fpm,mariadb,没有安装的话,参考本文中具体细节部分来进行安装和配置. 新建数据和wordpress下载参考上面的方法一,这里主要介绍使用nginx去解析wordpress源文件. 当前解压后wordpress的绝对路径是: /data/data/com.termux/files/home/wordpress 编辑nginx.conf vim /etc/nginx/nginx.conf 修改为如下几处: root /data/data/com.termux/files/home/wordpress; index index.html index.htm index.php; fastcgi_param SCRIPT_FILENAME /data/data/com.termux/files/home/wordpress$fastcgi_script_name; 启动php-fpm和nginx 在proot环境下面分别启动php-fpm和nginx,这里的nginx不在proot环境下启动后会出一些问题,感兴趣的可以自己去研究看看. php-fpm nginx 安装wordpress 浏览器访问:http://127.0.0.1:8080/wp-admin/setup-config.php进行安装. 效果图 同理安装其他博客也就轻而易举了,可玩性大大增加~ 搭建hexo博客 ","date":"2019-03-18","objectID":"/termux/:59:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装hexo npm install hexo-cli -g ","date":"2019-03-18","objectID":"/termux/:60:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"部署hexo博客环境 然后建立一个目录,然后到这个目录下初始化hexo环境 mkdir hexoblog #手动创建一个目录 cd hexoblog hexo init #初始化hexo环境 hexo g #生成静态文件 hexo s #启动hexo 然后就跑起来一个最基本的hexo博客 关于hexo博客的详细教程,建议搭建去参考hexo官方文档,我这里重点在于 termux 其他的不作过多的叙述. 效果图 termux-ssh-连接电脑 有时候要操作电脑,这个时候有了termux,躺在床上就可以操作电脑了,岂不是美滋滋~~ 安装openssh pkg install openssh 然后就可以直接ssh连接你的电脑了 前提是电脑安装了ssh服务 $ ssh sqlsec@192.168.1.8 手机连接操作电脑效果图: 电脑ssh连接Termux emmm 这个需求比较鸡肋,但是写文字嘛就得写全了~ 安装openssh 同样也需要openssh才可以 pkg install openssh 启动sshd 安装完成后,sshd服务默认没有启动,所以得手动启动下: sshd 因为手机上面低的端口有安全限制,所以这里的openssh默认的sshd默认的服务是8022端口上的. ssh的用户名用whoami命令看下. 可以看到sshd启动后,端口才可以看到. PC端生成公钥 ssh登录是key公钥模式登录,首先在PC端生成秘钥: sqlsec@ubuntu:-\u003e ssh-keygen -t rsa 执行完成后，会在家目录下创建3个文件 id_rsa, id_rsa.pub , known_hosts 拷贝公钥到手机 然后把公钥id_rsa.pub拷贝到手机的data\\data\\com.termux\\files\\home\\.ssh文件夹中. 将公钥拷贝到验证文件中 在Termux下操作 cat id_rsa.pub \u003e authorized_keys PC端连接手机termux sqlsec@ubuntu-\u003essh -p8022 u0_a119@192.168.1.3 效果图 pc端连接手机termux 真心鸡肋呀~(忍不住自己吐槽下自己) 使用Aria2打造自己的下载工具 Aria2是一个轻量级多协议和多源命令行下载实用工具。它支持 HTTP / HTTPS, FTP, SFTP, bt 和 Metalink。通过内置 Aria2 可以操作 json - rpc 和 xml - rpc。配置好的话还可以高速下载百度云文件. ","date":"2019-03-18","objectID":"/termux/:61:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装aria2 pkg install aria2 ","date":"2019-03-18","objectID":"/termux/:62:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"本地启动服务 aria2c --enable-rpc --rpc-listen-all 这个rpc服务默认监听的是6800端口,启动后方便下面的Web界面连接操作. ","date":"2019-03-18","objectID":"/termux/:63:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"webui-aria2 这是个Aria2的热门项目,把Aria2封装在了Web平台,操作起来更加简单便捷。 git clone https://github.com/ziahamza/webui-aria2.git cd webui-aria2 node node-server.js 需要node来运行,没有安装的 话使用pkg install nodejs来安装 使用效果图 ,速度蛮快的 ,有兴趣的可以研究如何利用aria2来下载百度云文件,等你们来探索. 多功能文件分享 官方项目地址 ","date":"2019-03-18","objectID":"/termux/:64:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装caddy 官方:到目前为止，在Android上运行Caddy有两种方式：Termux和adb,所以那就顺便折腾一下看看吧: cd ~ curl https://getcaddy.com |bash -s personal http.filemanager 这一步可能执行要3番钟左右,耐心等待一下即可. ","date":"2019-03-18","objectID":"/termux/:65:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"编写配置文件 cd ~ vim Caddyfile 内容如下: :8080 { filemanager / /sdcard timeouts none gzip} 这里的8080端口号可以随意指定,因为手机权限比较低,所以一般设置1024以上的端口. 注意8080和{之间有一个空格 注意/ / sdcard 两个斜杠之间也有一个空格 ","date":"2019-03-18","objectID":"/termux/:66:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"启动caddy caddy ","date":"2019-03-18","objectID":"/termux/:67:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"效果 浏览器访问:http://127.0.0.1:8080即可,局域网内的用户访问手机ip地址即可. 默认账号和密码为admin,admin. 可以在设置界面里面 设置简体中文,可以修改更新默认密码. 可以直接查看文件,也支持Linux命令搜索. Termux-api Termux:API，用于访问手机硬件,实现更多的可玩性,可以实现如下等功能: 访问电池信息 获取相机设备信息 获取本机设备信息 获取设置剪贴板信息 获取通讯录信息 获取设置手机短信 拨打号码 振动设备 ","date":"2019-03-18","objectID":"/termux/:68:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装Termux-api Termux-api Google Play下载地址 补充一下链接如何在电脑上下载Google play上的应用？ ","date":"2019-03-18","objectID":"/termux/:69:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装Termux-api软件包 安装完Termux-apiAPP后,Termux里面必须安装对应的包后才可以实现操作手机底层. pkg install termux-api 下面只列举一些可能会用到的,想要获取更多关于Termux-api的话,那就去参考官方文档. ","date":"2019-03-18","objectID":"/termux/:70:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"获取电池信息 termux-battery-status 可以看到电池的-健康状况-电量百分比-温度情况等 {\"health\":\"GOOD\", \"percentage\": 67, \"plugged\":\"UNPLUGGED\", \"status\":\"DISCHARGING\", \"temperature\": 24.600000381469727 } ","date":"2019-03-18","objectID":"/termux/:71:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"获取相机信息 termux-camera-info ","date":"2019-03-18","objectID":"/termux/:72:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"获取与设置剪贴板 查看当前剪贴板内容 termux-clipboard-get 设置新的剪贴板内容 termux-clipboard-set PHP是世界上最好的语言 效果演示 ","date":"2019-03-18","objectID":"/termux/:73:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"获取通讯录列表 termux-contact-list ","date":"2019-03-18","objectID":"/termux/:74:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"查看短信内容列表 termux-sms-inbox ","date":"2019-03-18","objectID":"/termux/:75:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"发送短信 termux-sms-send 支持同时发送多个号码,实现群发的效果,官方介绍如下: termux-sms-send -n number(s) recipient number(s) - separate multiple numbers by commas 发送测试 termux-sms-send -n 10001 cxll ","date":"2019-03-18","objectID":"/termux/:76:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"拨打电话 termux-telephony-call 拨打电话给10001中国电信,查看下话费有没有欠费~? termux-telephony-call 10001 ","date":"2019-03-18","objectID":"/termux/:77:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"WiFi相关 获取当前WiFi连接信息 termux-wifi-connectioninfo 获取最近一次WiFi扫描信息 termux-wifi-scaninfo ","date":"2019-03-18","objectID":"/termux/:78:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"小结-1 直接操作调动系统底层的话,可以通过编程来实现自动定时短信发送,语音播报等 DIY空间无线 一些无聊的尝试 一些无聊有趣的版块,如果你是一个正经讲究人,可以跳过这个板块以节约你的阅读时间. ","date":"2019-03-18","objectID":"/termux/:79:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"nyancat-彩虹猫 彩虹貓（英语：Nyan Cat）是在2011年4月上传在Youtube 的视频，并且迅速爆红于网络，並在2011年YouTube浏览量最高的视频中排名第五. pkg install nyancat nyancat 什么鬼~完全Get不到国外人的趣味点~ ","date":"2019-03-18","objectID":"/termux/:80:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"终端二维码 Linux 命令行下的二维码,主要核心是这个网址:http://qrenco.de/ echo\"http://www.sqlsec.com\"|curl -F-=\\\u003c- qrenco.de 如果你不嫌无聊的话还可以扫描这个二维码,然后就打开我的博客了. ","date":"2019-03-18","objectID":"/termux/:81:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"终端地图 一个基于nodejs编写的命令行下的地图. npm install mapscii -g mapscii 进入终端地图 操作方法 方向键 移动 a和z键 放大缩小 q键 退出 终端下的地图!讲究人~ 如果你足够无聊的话,还可以尝试能不能在这个地图上找到自己所在的位置. 在termux下安装linux操作系统 这里只讲系统的安装，对termux的折腾请见我另外的博文。 没有linux基础的就别忙往下看了。 ","date":"2019-03-18","objectID":"/termux/:82:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"安装步骤 ","date":"2019-03-18","objectID":"/termux/:83:0","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"1. 下载安装脚本 $ wget http://funs.ml/file/atilo ","date":"2019-03-18","objectID":"/termux/:83:1","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"2.设置执行权限 $ chmod +x atilo ","date":"2019-03-18","objectID":"/termux/:83:2","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"3. 运行atilo $ ./atilo 此时会出现如下界面： 通过信息我们可以知道 ./atilo + 系统名 就可以按照 ","date":"2019-03-18","objectID":"/termux/:83:3","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"4. 我们来安装一个arch试试 $ ./atilo arch 安装完成之后会提示你通过startarch指令启动arch ","date":"2019-03-18","objectID":"/termux/:83:4","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"5.启动arch $ startarch 启动之后你可以安装screenfetch秀一秀 $ paceman -S screenfetch $ screenfetch Screenshot_20170926-143923.png 是不是酷毙了。 ","date":"2019-03-18","objectID":"/termux/:83:5","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["Termux"],"content":"6. 删除arch 删除系统的方法很简单 $ ./atilo -r arch ","date":"2019-03-18","objectID":"/termux/:83:6","tags":["Termux","编程"],"title":"Termux 高级终端安装使用配置教程","uri":"/termux/"},{"categories":["JavaScript"],"content":"JavaScript: Slice, Substring, or Substr的选择！ ","date":"2019-03-17","objectID":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/:0:0","tags":["JavaScript","编程"],"title":"JavaScript字符串String提取方法比较","uri":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"},{"categories":["JavaScript"],"content":"在JavaScript中，子字符串主要通过以下String方法之一提取： // slice // syntax: string.slice(start [, stop]) \"Good news, everyone!\".slice(5,9); // 'news' // substring // syntax: string.substring(start [, stop]) \"Good news, everyone!\".substring(5,9); // 'news' // substr // syntax: string.substr(start [, length]) \"Good news, everyone!\".substr(5,4); // 'news' ","date":"2019-03-17","objectID":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/:1:0","tags":["JavaScript","编程"],"title":"JavaScript字符串String提取方法比较","uri":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"},{"categories":["JavaScript"],"content":"这三种方法都采用了开始索引和可选的结束索引（或长度）参数，但它们在某些重要方面有所不同： substr可以给出不一致的结果。现代浏览器允许使用负数索引，但IE8和更低版本将负开始索引视为0。 substring的参数是可逆的，因为它总是使用其最小参数值作为开始索引，最大值作为结束索引。substring将负开始索引视为0。 slice如果开始索引为负，则从字符串末尾开始切片。 ","date":"2019-03-17","objectID":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/:2:0","tags":["JavaScript","编程"],"title":"JavaScript字符串String提取方法比较","uri":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"},{"categories":["JavaScript"],"content":"负数作为参数 \"Good news, everyone!\".substring(-4); // \"Good news, everyone!\" \"Good news, everyone!\".substr(-4); // \"one!\" modern browsers, including IE9 // \"Good news, everyone!\" IE8 and lower \"Good news, everyone!\".slice(-4); // \"one!\" 由于所有三种方法都具有大致相同的性能，我的偏好是使用slice。它支持从字符串的末尾提取，我觉得在start index\u003e stop 时返回一个空字符串更遵循常人思维，比substring的参数交换更好。我避免使用substr，因为浏览器不一致。 ","date":"2019-03-17","objectID":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/:3:0","tags":["JavaScript","编程"],"title":"JavaScript字符串String提取方法比较","uri":"/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2string%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"},{"categories":["技巧"],"content":"文章长期更新 #公共图床排名 ##第一名 新浪微博图床 新浪微博图床无论是国内外速度还是CDN和HTTPS的支持都一样不少，谷歌商店也有相应的插件，我目前使用的是＂微博图床＂这个插件，相册上传位置可以在微相册中找到。缺点是微博并没有公开表示微相册可以一直提供外链，图片存在压缩。 评分 速度：★★★★★ 插件：★★★★★ CDN：★★★★★ 稳定性：★★★★ 费用: 免费 ###解决新浪图床的防盗链问题 ####方法1 网站头部添加下面代码，记得添加至\u003c/head\u003e之前 \u003cmetaname=\"referrer\"content=\"no-referrer\"\u003e 加这个的意思是新浪图片就无法追踪到请求图片的域名，可解决一些防盗链的限制！ 但是加这个对于一些AFF，友链都会导致无法追踪请求的域名，目前已知百度统计无法与这玩意共存，CNZZ、51la正常。 ####方法2 可以通过批量修改前缀来暂时恢复正常访问，新浪图片都是多台服务器寄存的，分别是wx1.sinaimg.cn、wx2.sinaimg.cn、wx3.sinaimg.cn、wx4.sinaimg.cn，这里我们需要将其替换成tva1.sinaimg.com、tva2.sinaimg.com、tva3.sinaimg.com、tva4.sinaimg.com，数字对不上也没关系，将wx后面的数字1~4打乱图片都能打开，但为了保险起见以及后期管理还是按照数字进行修改网址吧！ 一个个在文章中修改太麻烦，这里直接使用SQL命令批量处理，在此之前登录至网站的数据库导出备份一下，就算操作不当也能及时数据回滚。 ##第二名 imgur 这是著名的老牌图床,稳定性非常可靠(不被墙的情况下)，提供的上传工具也非常多。 评分 速度：★★★★ 插件：★★★★★ CDN：★★★★ 稳定性：★★★★★ 费用: 免费 ##第三名 sm.ms 大佬自建的图床，小于5M，不能管理图库，可批量上传，一次最多10张，无损，速度快,稳定性肯定不如上面的，不考虑未来收费的可能性。当然还有一些其他的免费图床，这里不再推荐，因为图床多了更不好管理。 评分 速度：★★★★ 插件：★★★★ CDN：★★★★ 稳定性：★★★ 费用: 免费 #其他方案 ##最稳妥的方案 七牛云对象云存储：免费10G，无免费外链。 腾讯云对象云存储： 免费50G，外链。 网易云对象云存储： 免费50G，外链。 阿里云对象云存储： 收费，外链。 onedrive：免费10-20G，外链。 ##偏门的方案 百度空间 360搜图 搜狗搜图 简书 其他网站的免费空间 ##整理的图片上传地址（不定期更新） 别人的整理 百度搜狗360微博四合一地址 微博插件 ","date":"2019-01-08","objectID":"/%E5%9B%BE%E5%BA%8A%E8%AF%84%E6%B5%8B/:0:0","tags":["图床"],"title":"图床选择","uri":"/%E5%9B%BE%E5%BA%8A%E8%AF%84%E6%B5%8B/"},{"categories":["哲学"],"content":"抑郁时的随想 关键词：起源 混沌 无为 道 量子 时间 循环 菩提 生死 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:0:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"起源 “宇宙”中文词来源于道家著作《文子，自然》宙指时间，宇指空间。道家早就指出宇宙无限的概念。这看起来很不可思议，当然现代物理也证明了宇宙镶嵌重复的形状决定了它的有限无界，道家一些理论似乎对现代物理都解释的通，但是物理和哲学界限还没有到达能够一通的水平，物理将成为哲学的终极答案，这一点似乎是已经很明确的了。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:1:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"混沌 混沌一词历史上出现次数非常多，描述也不太统一。万事万物皆有混沌，在 詹姆斯·格雷克 的书《混沌》中用一个例子来描述就是北京的一只蝴蝶拍了一下翅膀，竟引起加勒比海的飓风。这个世界的运行规律远没有想象的那么简单，人类的思维限制了世界的边界。所谓“混沌”，是指看来遵从确定规律的事物也会显现超乎想象的繁复多样，只要有些微的条件差异，就会导致令人瞠目结舌的不同结果。混沌不是哲学上的想当然，它对于人类理解这个世界的运行规律提供了一种强有力的方法论。这也引出了人工智能的重要性，因为人类的智慧短时间内是有限的，就拿对数据极其敏感的天气来说，人工智能可以分析全部可能的要素，正确得出结论，人工智能的进化是人类想象不到的。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:2:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"无为 无为是道家文化思想，无为的解释随着历史发展的也出现了各种各样的误解，无为的境界一般人难以达到，老庄认为真正道德修为很高的任是已无为为有为的，因为已经达到高度理性的境界。无为主张洞悉自然，顺应天道，所谓“人定胜天”更是无知的表现。王阳明对于自我的顿悟，提出了“知行合一”的思想，我认为这是“无为”一种境界，即知天命，行人道。对于“无为”的理解和如何做到“无为为有为”才能真正知天命？ ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:3:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"道 老君曰：大道无形，生育天地；大道无情，运行日月；大道无名，长养万物；吾不知其名，强名曰道。道即万物的的终极的真理，其实理解为物理的TOE也颇为合适，这又回到了起源，道是万物的起源，不知其名。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:4:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"量子 一个物理量如果存在最小的不可分割的基本单位，则这个物理量是量子化的，并把最小单位称为量子。量子是近年来兴起的热词，但是在1900年左右，M·普朗克试图解决黑体辐射问题，他大胆提出量子假设，并得出了普朗克辐射定律，沿用至今。后来为了指出量子力学哥本哈根解释的不完备性，由伟大的物理学家薛定谔提出的一个薛定谔猫的理想实验。虽然量子理论还有很长的路要走，但是根据客观规律，人们已经研制出量子加密，量子计算机的基础产品。所以说量子理论也为我们了解世界提供了一种方法论。所以说“上帝”掷不掷骰子？ ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:5:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"时间 时间大家并陌生，是除空间以外第四维，估计很多人都看过许多科幻影视作品中穿越时空到过去或者未来，很明显这是不符合相对论的描述，但有一种方案似乎可行，看过神盾局特工的应该知道有一场景为了躲避地球末日而建立的避难所的冷冻装置，他将你身体冷冻，到一定时间解冻，似乎也完成了穿越到未来的过程，也就是相对的与被冷冻者思想，他穿越到了未来。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:6:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"循环 循环的威力是无穷的，它广泛应用各个领域，许多数学上的问题比如n的阶乘很难表示，但如果加上循环的思想则非常简单，计算机语言中都会有循环的概念。从广义上说人类社会也可以看作循环的结果，后人站在前人的肩膀上，往复。当然循环效应也可以解释我为什么没有提时空穿梭的虫洞理论。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:7:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"菩提 人之于地球万物可说达到了“菩提”的境界，这不得归公功于人的大脑，准确来说是人的大脑皮层，它使人类拥有了智慧。当然这里还有一个自制力相关的理论：乔纳森·海特（Jonathan Haidt），将大脑比作大象与骑象人。(《the happiness hypothesis》)骑象人是自觉的、控制的，而大象则是知觉、身体、情绪等构成的无意识系统。这是有解剖学证据支撑的：骑象人部分就是人的大脑皮层，而大象部分就是人的原始脑。现代心理学的双加工模型也支持了这一点。在我们现今的世界里，一天24小时全天候地充斥着各种各样的信息，分散着人们的注意力；有很多额外的事物试图控制我们的时间和注意力。注意力其实是很有限的，对吗？如果没有办法集中注意力，无论你有什么样的雄心壮志也没有用。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:8:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"},{"categories":["哲学"],"content":"生死 生死是万物更新进化的必然结果，从古代来看人们认为生死是转世投胎的轮回，现代看来这并没有什么说服力，因为人死了变为尘土，仅此而已，留下只有你存在于这个世界的一些多少不同痕迹，就像愚公移山，子子孙孙无穷匮也，每个人存在的意义就是使人类社会能够进步。以后的发展，人类如果能够突破生死的束缚，找到可以进化的更好的方法，那人类或许可以找到真正的“道”。 ","date":"2019-01-06","objectID":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/:9:0","tags":["哲学"],"title":"抑郁期随想","uri":"/%E6%8A%91%E9%83%81%E6%9C%9F%E9%9A%8F%E6%83%B3/"}]